# -*- coding: utf-8 -*-
"""Regression_Bayan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ofRtUlKL_D8MelptPjd7KgqFiIAqdNk3

# **Prepare & Explore Dataset**
"""

import numpy as np
import pandas as pd
#read the dataset
concrete_data = pd.read_csv('/content/concrete_data.csv')
#split the dataset into train and test
train_data = concrete_data.sample(frac=0.8,random_state=0)
test_data = concrete_data.drop(train_data.index)
concrete_data

train_data

test_data

"""# **Predictors** **and** **Target**"""

#split train and test data into predictors and target
train_predictors = train_data[train_data.columns[train_data.columns != 'Strength']]
train_target = train_data['Strength']

test_predictors = test_data[test_data.columns[test_data.columns != 'Strength']]
test_target = test_data['Strength']

train_predictors

train_target

#data normalization
train_predictors = (train_predictors - train_predictors.mean())/ train_predictors.std()
test_predictors = (test_predictors - test_predictors.mean())/ test_predictors.std()

"""# **Define the neural network architecture**"""

import tensorflow as tf
from tensorflow import keras
from keras import layers

model = keras.Sequential()
n = train_predictors.shape[1]
model.add(layers.Dense(5, activation='sigmoid',input_shape = (n,) ))
model.add(layers.Dense(5, activation='sigmoid'))
model.add(layers.Dense(1) )

"""# **Compile the nural net**"""

model.compile(optimizer='adam', loss='mse')

model.compile(
    optimizer='adam',
    loss='mean_squared_error',
    metrics=['accuracy', 'mse']
)

keras.utils.plot_model(model, show_shapes=True, rankdir="LR")

"""# **Fit/ train the nural net**"""

model.fit(train_predictors, train_target, epochs = 100 )

"""# **Evaluate the neural net**"""

result = model.evaluate(test_predictors, test_target, verbose=0)
dict(zip(model.metrics_names, result))

"""# **Using tanh activation function**"""

import tensorflow as tf
from tensorflow import keras
from keras import layers

model = keras.Sequential()
n = train_predictors.shape[1]
model.add(layers.Dense(5, activation='tanh',input_shape = (n,) ))
model.add(layers.Dense(5, activation='tanh'))
model.add(layers.Dense(1) )

model.compile(
    optimizer='adam',
    loss='mean_squared_error',
    metrics=['accuracy', 'mse']
)
model.fit(train_predictors, train_target, epochs = 100 )

result = model.evaluate(test_predictors, test_target, verbose=0)
dict(zip(model.metrics_names, result))

"""# **Using tanh activation function and more neurons**"""

model = keras.Sequential()
n = train_predictors.shape[1]
model.add(layers.Dense(50, activation='tanh',input_shape = (n,) ))
model.add(layers.Dense(50, activation='tanh'))
model.add(layers.Dense(1) )

model.compile(
    optimizer='adam',
    loss='mean_squared_error',
    metrics=['accuracy', 'mse']
)
model.fit(train_predictors, train_target, epochs = 100 )

result = model.evaluate(test_predictors, test_target, verbose=0)
dict(zip(model.metrics_names, result))

"""# **Using relu activation function and more neurons**"""

model = keras.Sequential()
n = train_predictors.shape[1]
model.add(layers.Dense(50, activation='relu',input_shape = (n,) ))
model.add(layers.Dense(50, activation='relu'))
model.add(layers.Dense(1) )

model.compile(
    optimizer='adam',
    loss='mean_squared_error',
    metrics=['accuracy', 'mse']
)
model.fit(train_predictors, train_target, epochs = 100 )

result = model.evaluate(test_predictors, test_target, verbose=0)
dict(zip(model.metrics_names, result))
